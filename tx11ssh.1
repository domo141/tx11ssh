.\" Hey, EMACS: -*- nroff -*-
.\"
.\"     Copyright (c) 2013 Tomi Ollila
.\"         All rights reserved
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
.\" THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
.\" CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\" EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\" PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\" NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" man groff_man
.\"
.TH TX11SSH 1 2013-02-27 "tx11ssh 0.99" "User Commands"
.\"
.SH NAME
tx1ssh \- tunnel X11 traffic over ssh connection
.\"
.SH SYNOPSIS
.B tx11ssh +
[:[\fInums\fR][:\fInumd\fR]]
[--ssh-command
.IR command]
[--ll
.IR num]
.IR args...
.P
.B tx11ssh -
[:[\fInums\fR][:\fInumd\fR]]
[--ssh-command
.IR command]
[--ll
.IR num]
.IR args...
.br
.\"
.SH DESCRIPTION

\fBtx11ssh\fR provides a way to tunnel X11 traffic over ssh connection,
in either direction from initiator's point of view:
.TP 4
.B +
after connection is made, open windows from local clients to remote display
.TP 4
.B -
after connection is made, open windows from remote clients to local display
.PP
The '\fB+\fR' option is convenient when ssh connection cannot be made in
the direction for standard X11 forwarding provided by \fBssh\fR(1) and
the '\fB-\fR' is useful when \fBsshd\fR(8) is not configured to support
X11 forwarding.
.\"
.SH OPTIONS

.TP 4
.RI [:[\fInums\fR][:\fInumd\fR]]
Use these numbers in unix sockets created. The first number \fInums\fR is the
server socket to be created (i.e. /tmp/.X11-unix/X\fInums\fR) and the second
\fInumd\fR display server socket where co connect. Default values are 11
and 0, respectively. Either can be omitted; e.g. :\fI12\fR and ::\fI1\fR are
accepted.
.TP 4
.RI --ssh-command \ \fIcommand\fR
Execute command instead of '\fBssh\fR' for tunnel creation
.TP 4
.RI --ll \ \fInum\fR
The "loglevel" of tx11ssh. With value 0 only severe warnings are printed
to stderr. With value 4 all messages are printed. Default value is 2.
.TP 4
.IR args...
"command line arguments" given to \fBssh\fR when executed. Given verbatim.
This is flexible; tx11ssh can be executed with alternate path or wrappers
can be used if needed, but this can also be used to break things (e.g. wrong
paths or \fI-f/n\fR flags given to ssh...).
.\"
.SH SECURITY

The normal X security concerns apply here, e.g. \fBxinput\fR(1) can be used
to sneak X events of other windows. There is uid check for the X client
connecting to the X unix domain socket done; whether this is enough one
have to judge itself. Use of wrapx11usock.so shown below will at least
hide the X socket from other users (security by obscurity when thinking
about root users).
.\"
.SH EXAMPLES

.B Case\ 1:
One wants to open windows from Windows machine on a Unix desktop;
but configuring sshd to work on windows (cygwin) environment is nontrivial
thing to do. From one Cygwin Terminal open x11ssh tunnel to unix host and
from another execute urxvt terminal using display 11 (which is tx11ssh
default) to open the urxvt terminal window to remote X display.

.RS 2
.I cygwin-term1\fR$
tx11ssh + user@unixhost
.P
.I cygwin-term2\fR$
DISPLAY=:11 urxvt -fade 1 -tn rxvt-unicode &
.RE

.B Case\ 2:
Remote sshd is not configured to support X11 forwarding, therefore
it has to be done by "ourselves". The '-' option of tx11ssh makes the X11
unix domain server socket available on a remote host; the command line on
second terminal below uses the display 11 (tx11ssh default) to open
the window of remote command on local X display.

.RS 2
.I term1\fR$
tx11ssh - user@host
.P
.I term2\fR$
ssh -f user@host env DISPLAY=:11 urxvt
.RE

.B Case\ 3:
This is like case 2, but instead of using \fI/tmp/.X11-unix/X11\fR for
the X11 display unix domain socket, use \fI$HOME/.ssh/X11\fR instead. The
wrapx11usock preload library does the path mangling to achieve this.
The reasons one might need this includes: security, multiuser support
and filesystem permissions. The wrapx11usock.sh script (and the source
for the preload library it uses) can be found in the source archive of
.B tx11ssh.

.RS 2
.I term1\fR$
tx11ssh - user@host ./wrapx11usock.sh
.P
.I term2\fR$
ssh -f user@host ./wrapx11usock.sh urxvt
.RE
.\"
.SH "DETACHING tx1ssh"

Perfect "detaching" from shell is impossible to implement in
tx11ssh since one needs to detach from control terminal too.
If detaching is postponed after ssh tunnel is created, the
ssh process cannot be detached (anymore). If detach is done
before executing ssh, interactive authentication methods on
terminal cannot be done anymore.
Therefore detaching, whenever anyone wants to do so, can be
done at least with the the help of following commands(*):

Non-interactive:

.RS 2
.PD 0
nohup setsid tx11ssh + remote > tx11ssh.log
.P
nohup script -a -f -c 'tx11ssh + remote' tx11ssh.log >/dev/null
.P
dtach -n tx11ssh-dtach-s sh -n 'exec tx11ssh + remote 2>tx11ssh.log'
.PD
.RE

Interactive, until detached:

.RS 2
.PD 0
dtach -c tx11ssh-dtach-s sh -c 'exec tx11ssh + remote 2>tx11ssh.log'
.P
dtach -c tx11ssh-dtach-s script -c 'tx11ssh + remote' tx11ssh.log
.P
screen tx11ssh + remote
.P
tmux tx11ssh + remote
.PD
.RE
.\"
.TP 4
.RI (*)
Interestingly at least in linux, both \fBsetsid\fR(1) & \fBscript(1)\fR
escapes from terminal when execve'd from \fBnohup\fR(1)...
.\"
.SH "SEE ALSO"

\fBssh\fR(1),
\fBXserver\fR(1),
\fBX\fR(7)
