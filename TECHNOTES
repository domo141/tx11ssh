
In brief:

fd's used
---------

local-server
''''''''''''
0: stdin
1: stdout
2: stderr
3: ssh connection
4: server unix domain socket

local-display
'''''''''''''
0: stdin
1: stdout
2: stderr
3: /dev/null
4: /dev/null

remote-server
'''''''''''''
0: ssh connection
1: ssh connection
2: stderr to ssh connection
3: /dev/null
4: server unix domain socket

remote-display
''''''''''''''
0: ssh connection
1: ssh connection
2: stderr to ssh connection
3: /dev/null
4: /dev/null


Fd's 5 - 255 are for channels. channel-fd mapping is kept by using dup2()
and close() (see display_handle_server_message() for plug trick)


tech:
        flow control -- is needed ?
        buffering when blocking --- ?

linux$ ./usock-buffer-test 4545
..........................
wrote 118170 bytes. last write: -1 (26.00 * 4545)
linux$ ./usock-buffer-test 4544
...........................
wrote 122688 bytes. last write: -1 (27.00 * 4544)

cygwin$ ./usock-buffer-test 4313
..............................................
wrote 198398 bytes. last write: -1 (46.00 * 4313)
cygwin$ ./usock-buffer-test 4544
...............................................
wrote 202664 bytes. last write: -1 (47.00 * 4312)


komentoja:

        lcd
        rcd
        lls
        rls
        get
        put
        x

detach:
        nohup(1) setsid(1) rx11ssh ...
        nohup(1) setsid(1) sh -c 'exec rx11ssh ... 2>file'
        nohup(1) script(1) -c 'rx11ssh ... 2>file'
        screen(1)
        tmux(1)
        dtach(1) -c rx11ssh-dtach-sock rx11ssh...
        dtach(1) -n rx11ssh-dtach-sock /bin/sh -c 'exec rx11ssh... 2>file'


        nohup setsid rx11ssh ... > rx11ssh.log

SECURITY

        Currently credentials of clients connecting to server socket
        are not checked (poor documentation, especially on portability
        point of view). Use only on 'safe' systems. You're been warned


Detaching rx11ssh

        Perfect "detaching" from shell is impossible to implement in
        rx11ssh since one needs to detach from control terminal too.
        If detaching is postponed after ssh tunnel is created, the
        ssh process cannot be detached (anymore). If detach is done
        before executing ssh, interactive authentication methods on
        terminal cannot be done anymore.
        Therefore detaching, whenever anyone wants to do so, can be
        done at least with the the help of following commands(*):

        Non-interactive:

        nohup setsid rx11ssh example.org > rx11ssh.log
        nohup script -a -f -c rx11ssh.c rx11ssh.log >/dev/null
        dtach -n rx11ssh-dtach-s sh -c 'exec rx11ssh example.org 2>rx11ssh.log'

        Interactive, until detached:

        dtach -c rx11ssh-dtach-s sh -c 'exec rx11ssh example.org 2>rx11ssh.log'
        dtach -c rx11ssh-dtach-s script -c rx11ssh example.org rx1ssh.log
        screen rx11ssh example.org
        tmux  rx11ssh example.org

        (*) Interestingly at least in linux, both setsid(1) & script(1) escapes
        from terminal when execve'd from nohup(1)...
